# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from server.incidents import incident_pb2 as common_dot_proto_dot_Incident__pb2


class OffersStub(object):
    """Offers service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getLocalOffers = channel.unary_unary(
                '/incident.Offers/getLocalOffers',
                request_serializer=common_dot_proto_dot_Incident__pb2.OfferRequest.SerializeToString,
                response_deserializer=common_dot_proto_dot_Incident__pb2.OfferResponse.FromString,
                )


class OffersServicer(object):
    """Offers service
    """

    def getLocalOffers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OffersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getLocalOffers': grpc.unary_unary_rpc_method_handler(
                    servicer.getLocalOffers,
                    request_deserializer=common_dot_proto_dot_Incident__pb2.OfferRequest.FromString,
                    response_serializer=common_dot_proto_dot_Incident__pb2.OfferResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'incident.Offers', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Offers(object):
    """Offers service
    """

    @staticmethod
    def getLocalOffers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/incident.Offers/getLocalOffers',
            common_dot_proto_dot_Incident__pb2.OfferRequest.SerializeToString,
            common_dot_proto_dot_Incident__pb2.OfferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MapIncidentsStub(object):
    """Map/Incidents service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getLocalChats = channel.unary_unary(
                '/incident.MapIncidents/getLocalChats',
                request_serializer=common_dot_proto_dot_Incident__pb2.ChatRequest.SerializeToString,
                response_deserializer=common_dot_proto_dot_Incident__pb2.ChatResponse.FromString,
                )
        self.searchChats = channel.unary_unary(
                '/incident.MapIncidents/searchChats',
                request_serializer=common_dot_proto_dot_Incident__pb2.ChatSearchRequest.SerializeToString,
                response_deserializer=common_dot_proto_dot_Incident__pb2.ChatResponse.FromString,
                )
        self.getLocalIncidents = channel.unary_unary(
                '/incident.MapIncidents/getLocalIncidents',
                request_serializer=common_dot_proto_dot_Incident__pb2.IncidentRequest.SerializeToString,
                response_deserializer=common_dot_proto_dot_Incident__pb2.IncidentResponse.FromString,
                )
        self.addIncident = channel.unary_unary(
                '/incident.MapIncidents/addIncident',
                request_serializer=common_dot_proto_dot_Incident__pb2.AddIncidentRequest.SerializeToString,
                response_deserializer=common_dot_proto_dot_Incident__pb2.AddIncidentResponse.FromString,
                )
        self.sendIncidentReaction = channel.unary_unary(
                '/incident.MapIncidents/sendIncidentReaction',
                request_serializer=common_dot_proto_dot_Incident__pb2.IncidentReactionRequest.SerializeToString,
                response_deserializer=common_dot_proto_dot_Incident__pb2.IncidentReactionResponse.FromString,
                )


class MapIncidentsServicer(object):
    """Map/Incidents service
    """

    def getLocalChats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def searchChats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLocalIncidents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addIncident(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendIncidentReaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapIncidentsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getLocalChats': grpc.unary_unary_rpc_method_handler(
                    servicer.getLocalChats,
                    request_deserializer=common_dot_proto_dot_Incident__pb2.ChatRequest.FromString,
                    response_serializer=common_dot_proto_dot_Incident__pb2.ChatResponse.SerializeToString,
            ),
            'searchChats': grpc.unary_unary_rpc_method_handler(
                    servicer.searchChats,
                    request_deserializer=common_dot_proto_dot_Incident__pb2.ChatSearchRequest.FromString,
                    response_serializer=common_dot_proto_dot_Incident__pb2.ChatResponse.SerializeToString,
            ),
            'getLocalIncidents': grpc.unary_unary_rpc_method_handler(
                    servicer.getLocalIncidents,
                    request_deserializer=common_dot_proto_dot_Incident__pb2.IncidentRequest.FromString,
                    response_serializer=common_dot_proto_dot_Incident__pb2.IncidentResponse.SerializeToString,
            ),
            'addIncident': grpc.unary_unary_rpc_method_handler(
                    servicer.addIncident,
                    request_deserializer=common_dot_proto_dot_Incident__pb2.AddIncidentRequest.FromString,
                    response_serializer=common_dot_proto_dot_Incident__pb2.AddIncidentResponse.SerializeToString,
            ),
            'sendIncidentReaction': grpc.unary_unary_rpc_method_handler(
                    servicer.sendIncidentReaction,
                    request_deserializer=common_dot_proto_dot_Incident__pb2.IncidentReactionRequest.FromString,
                    response_serializer=common_dot_proto_dot_Incident__pb2.IncidentReactionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'incident.MapIncidents', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MapIncidents(object):
    """Map/Incidents service
    """

    @staticmethod
    def getLocalChats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/incident.MapIncidents/getLocalChats',
            common_dot_proto_dot_Incident__pb2.ChatRequest.SerializeToString,
            common_dot_proto_dot_Incident__pb2.ChatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def searchChats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/incident.MapIncidents/searchChats',
            common_dot_proto_dot_Incident__pb2.ChatSearchRequest.SerializeToString,
            common_dot_proto_dot_Incident__pb2.ChatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getLocalIncidents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/incident.MapIncidents/getLocalIncidents',
            common_dot_proto_dot_Incident__pb2.IncidentRequest.SerializeToString,
            common_dot_proto_dot_Incident__pb2.IncidentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addIncident(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/incident.MapIncidents/addIncident',
            common_dot_proto_dot_Incident__pb2.AddIncidentRequest.SerializeToString,
            common_dot_proto_dot_Incident__pb2.AddIncidentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendIncidentReaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/incident.MapIncidents/sendIncidentReaction',
            common_dot_proto_dot_Incident__pb2.IncidentReactionRequest.SerializeToString,
            common_dot_proto_dot_Incident__pb2.IncidentReactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ProfileStub(object):
    """Profile service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.updateProfileInfo = channel.unary_unary(
                '/incident.Profile/updateProfileInfo',
                request_serializer=common_dot_proto_dot_Incident__pb2.ProfileInfoUpdateRequest.SerializeToString,
                response_deserializer=common_dot_proto_dot_Incident__pb2.ProfileInfoUpdateResponse.FromString,
                )
        self.getCommonGroups = channel.unary_unary(
                '/incident.Profile/getCommonGroups',
                request_serializer=common_dot_proto_dot_Incident__pb2.CommonGroupsRequest.SerializeToString,
                response_deserializer=common_dot_proto_dot_Incident__pb2.CommonGroupsResponse.FromString,
                )


class ProfileServicer(object):
    """Profile service
    """

    def updateProfileInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCommonGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProfileServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'updateProfileInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.updateProfileInfo,
                    request_deserializer=common_dot_proto_dot_Incident__pb2.ProfileInfoUpdateRequest.FromString,
                    response_serializer=common_dot_proto_dot_Incident__pb2.ProfileInfoUpdateResponse.SerializeToString,
            ),
            'getCommonGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.getCommonGroups,
                    request_deserializer=common_dot_proto_dot_Incident__pb2.CommonGroupsRequest.FromString,
                    response_serializer=common_dot_proto_dot_Incident__pb2.CommonGroupsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'incident.Profile', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Profile(object):
    """Profile service
    """

    @staticmethod
    def updateProfileInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/incident.Profile/updateProfileInfo',
            common_dot_proto_dot_Incident__pb2.ProfileInfoUpdateRequest.SerializeToString,
            common_dot_proto_dot_Incident__pb2.ProfileInfoUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCommonGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/incident.Profile/getCommonGroups',
            common_dot_proto_dot_Incident__pb2.CommonGroupsRequest.SerializeToString,
            common_dot_proto_dot_Incident__pb2.CommonGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AuxiliaryStub(object):
    """Auxiliary service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getImage = channel.unary_stream(
                '/incident.Auxiliary/getImage',
                request_serializer=common_dot_proto_dot_Incident__pb2.ImageRequest.SerializeToString,
                response_deserializer=common_dot_proto_dot_Incident__pb2.DataChunk.FromString,
                )
        self.getProfileInfo = channel.unary_unary(
                '/incident.Auxiliary/getProfileInfo',
                request_serializer=common_dot_proto_dot_Incident__pb2.ProfileInfoRequest.SerializeToString,
                response_deserializer=common_dot_proto_dot_Incident__pb2.ProfileInfoResponse.FromString,
                )


class AuxiliaryServicer(object):
    """Auxiliary service
    """

    def getImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getProfileInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuxiliaryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getImage': grpc.unary_stream_rpc_method_handler(
                    servicer.getImage,
                    request_deserializer=common_dot_proto_dot_Incident__pb2.ImageRequest.FromString,
                    response_serializer=common_dot_proto_dot_Incident__pb2.DataChunk.SerializeToString,
            ),
            'getProfileInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getProfileInfo,
                    request_deserializer=common_dot_proto_dot_Incident__pb2.ProfileInfoRequest.FromString,
                    response_serializer=common_dot_proto_dot_Incident__pb2.ProfileInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'incident.Auxiliary', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Auxiliary(object):
    """Auxiliary service
    """

    @staticmethod
    def getImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/incident.Auxiliary/getImage',
            common_dot_proto_dot_Incident__pb2.ImageRequest.SerializeToString,
            common_dot_proto_dot_Incident__pb2.DataChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getProfileInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/incident.Auxiliary/getProfileInfo',
            common_dot_proto_dot_Incident__pb2.ProfileInfoRequest.SerializeToString,
            common_dot_proto_dot_Incident__pb2.ProfileInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
